% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/dmc_sampling.R
\name{run.dmc}
\alias{run.dmc}
\title{run function}
\usage{
run.dmc(samples, report = 100, cores = 1, p.migrate = 0,
  gamma.mult = 2.38, farjump = NA, force = FALSE, setting = NULL,
  verbose = FALSE, debug = FALSE)
}
\arguments{
\item{samples}{a sample list generated by calling DMC's samples.dmc.
You can also use ggdmc's own initialise to generate a samples.}

\item{report}{how many iterations to return a report}

\item{cores}{a switch for computing the prob density for each trial in
parallel. Turn it on by setting any number > 1.}

\item{p.migrate}{set it greater than 0 to use migration samplers. For example
p.migrate=0.05 will use migration in 5\% chance.}

\item{gamma.mult}{a DEMC tuning parameter, affecting the size of jump}

\item{farjump}{No funciton for compatibility reason}

\item{force}{No funciton for compatibility reason}

\item{setting}{a list run setting arguments, such as p.migrate, gamma.mult,
report and cores, send to C++ function.}

\item{verbose}{Turn it on to print loads of debugging informatoin}

\item{debug}{default as FALSE to use random chain sequence. TRUE uses ordered
chain sequence.}
}
\value{
a 'samples'
}
\description{
a wrapper function calls run_data C++ function to do hierarchical Bayesian
sampling. It selects data-level or hyper-level sampling by looking for
hyper attribute and the numbers of participants in a sample list.
}

