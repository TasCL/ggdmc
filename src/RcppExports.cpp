// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

// getAccumulatorMatrix
Rcpp::NumericMatrix getAccumulatorMatrix(Rcpp::NumericVector pVec, std::string cell, Rcpp::NumericVector model, bool n1order);
RcppExport SEXP ggdmc_getAccumulatorMatrix(SEXP pVecSEXP, SEXP cellSEXP, SEXP modelSEXP, SEXP n1orderSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< std::string >::type cell(cellSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type model(modelSEXP);
    Rcpp::traits::input_parameter< bool >::type n1order(n1orderSEXP);
    rcpp_result_gen = Rcpp::wrap(getAccumulatorMatrix(pVec, cell, model, n1order));
    return rcpp_result_gen;
END_RCPP
}
// ddmc
std::vector<double> ddmc(Rcpp::DataFrame x, Rcpp::NumericVector pVec, double precision, double minLike);
RcppExport SEXP ggdmc_ddmc(SEXP xSEXP, SEXP pVecSEXP, SEXP precisionSEXP, SEXP minLikeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type minLike(minLikeSEXP);
    rcpp_result_gen = Rcpp::wrap(ddmc(x, pVec, precision, minLike));
    return rcpp_result_gen;
END_RCPP
}
// ddmc_parallel
std::vector<double> ddmc_parallel(Rcpp::DataFrame x, Rcpp::NumericVector pVec, double precision, double minLike);
RcppExport SEXP ggdmc_ddmc_parallel(SEXP xSEXP, SEXP pVecSEXP, SEXP precisionSEXP, SEXP minLikeSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::DataFrame >::type x(xSEXP);
    Rcpp::traits::input_parameter< Rcpp::NumericVector >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< double >::type precision(precisionSEXP);
    Rcpp::traits::input_parameter< double >::type minLike(minLikeSEXP);
    rcpp_result_gen = Rcpp::wrap(ddmc_parallel(x, pVec, precision, minLike));
    return rcpp_result_gen;
END_RCPP
}
// g_minus
double g_minus(std::vector<double> pVec);
RcppExport SEXP ggdmc_g_minus(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_minus(pVec));
    return rcpp_result_gen;
END_RCPP
}
// g_plus
double g_plus(std::vector<double> pVec);
RcppExport SEXP ggdmc_g_plus(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_plus(pVec));
    return rcpp_result_gen;
END_RCPP
}
// g_minus_parallel
double g_minus_parallel(std::vector<double> pVec);
RcppExport SEXP ggdmc_g_minus_parallel(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_minus_parallel(pVec));
    return rcpp_result_gen;
END_RCPP
}
// g_plus_parallel
double g_plus_parallel(std::vector<double> pVec);
RcppExport SEXP ggdmc_g_plus_parallel(SEXP pVecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< std::vector<double> >::type pVec(pVecSEXP);
    rcpp_result_gen = Rcpp::wrap(g_plus_parallel(pVec));
    return rcpp_result_gen;
END_RCPP
}
// initialise_data
Rcpp::List initialise_data(int nmc, Rcpp::Nullable<Rcpp::List> pList, Rcpp::Nullable<Rcpp::List> data, Rcpp::Nullable<Rcpp::List> samples, Rcpp::Nullable<Rcpp::NumericMatrix> theta1, Rcpp::Nullable<Rcpp::List> startPList, Rcpp::Nullable<Rcpp::List> setting);
RcppExport SEXP ggdmc_initialise_data(SEXP nmcSEXP, SEXP pListSEXP, SEXP dataSEXP, SEXP samplesSEXP, SEXP theta1SEXP, SEXP startPListSEXP, SEXP settingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type pList(pListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type startPList(startPListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type setting(settingSEXP);
    rcpp_result_gen = Rcpp::wrap(initialise_data(nmc, pList, data, samples, theta1, startPList, setting));
    return rcpp_result_gen;
END_RCPP
}
// initialise_hyper
Rcpp::List initialise_hyper(int nmc, Rcpp::Nullable<Rcpp::List> pList, Rcpp::Nullable<Rcpp::List> data, Rcpp::Nullable<Rcpp::List> samples, Rcpp::Nullable<Rcpp::NumericMatrix> theta1, Rcpp::Nullable<Rcpp::List> startPList, Rcpp::Nullable<Rcpp::List> phi1, Rcpp::Nullable<Rcpp::List> ppList, Rcpp::Nullable<Rcpp::List> hStartPList, Rcpp::Nullable<Rcpp::List> setting);
RcppExport SEXP ggdmc_initialise_hyper(SEXP nmcSEXP, SEXP pListSEXP, SEXP dataSEXP, SEXP samplesSEXP, SEXP theta1SEXP, SEXP startPListSEXP, SEXP phi1SEXP, SEXP ppListSEXP, SEXP hStartPListSEXP, SEXP settingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< int >::type nmc(nmcSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type pList(pListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type data(dataSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::NumericMatrix> >::type theta1(theta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type startPList(startPListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type phi1(phi1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type ppList(ppListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type hStartPList(hStartPListSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<Rcpp::List> >::type setting(settingSEXP);
    rcpp_result_gen = Rcpp::wrap(initialise_hyper(nmc, pList, data, samples, theta1, startPList, phi1, ppList, hStartPList, setting));
    return rcpp_result_gen;
END_RCPP
}
// dprior
Rcpp::NumericVector dprior(Rcpp::NumericVector& pVec, Rcpp::List& pPrior);
RcppExport SEXP ggdmc_dprior(SEXP pVecSEXP, SEXP pPriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericVector& >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type pPrior(pPriorSEXP);
    rcpp_result_gen = Rcpp::wrap(dprior(pVec, pPrior));
    return rcpp_result_gen;
END_RCPP
}
// rprior
Rcpp::NumericMatrix rprior(Rcpp::List pPrior, int n);
RcppExport SEXP ggdmc_rprior(SEXP pPriorSEXP, SEXP nSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type pPrior(pPriorSEXP);
    Rcpp::traits::input_parameter< int >::type n(nSEXP);
    rcpp_result_gen = Rcpp::wrap(rprior(pPrior, n));
    return rcpp_result_gen;
END_RCPP
}
// run_data
Rcpp::List run_data(Rcpp::List& samples, Rcpp::List& setting, bool debug);
RcppExport SEXP ggdmc_run_data(SEXP samplesSEXP, SEXP settingSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type setting(settingSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(run_data(samples, setting, debug));
    return rcpp_result_gen;
END_RCPP
}
// run_data_parallel
Rcpp::List run_data_parallel(Rcpp::List& samples, Rcpp::List& setting, bool debug);
RcppExport SEXP ggdmc_run_data_parallel(SEXP samplesSEXP, SEXP settingSEXP, SEXP debugSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type setting(settingSEXP);
    Rcpp::traits::input_parameter< bool >::type debug(debugSEXP);
    rcpp_result_gen = Rcpp::wrap(run_data_parallel(samples, setting, debug));
    return rcpp_result_gen;
END_RCPP
}
// run_hyper
Rcpp::List run_hyper(Rcpp::List samples, Rcpp::List& setting);
RcppExport SEXP ggdmc_run_hyper(SEXP samplesSEXP, SEXP settingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type setting(settingSEXP);
    rcpp_result_gen = Rcpp::wrap(run_hyper(samples, setting));
    return rcpp_result_gen;
END_RCPP
}
// run_hyper_parallel
Rcpp::List run_hyper_parallel(Rcpp::List samples, Rcpp::List& setting);
RcppExport SEXP ggdmc_run_hyper_parallel(SEXP samplesSEXP, SEXP settingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type setting(settingSEXP);
    rcpp_result_gen = Rcpp::wrap(run_hyper_parallel(samples, setting));
    return rcpp_result_gen;
END_RCPP
}
// assign_pp_pLists
Rcpp::List assign_pp_pLists(Rcpp::List& samples_s1, Rcpp::List& usePhi);
RcppExport SEXP ggdmc_assign_pp_pLists(SEXP samples_s1SEXP, SEXP usePhiSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::List& >::type samples_s1(samples_s1SEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type usePhi(usePhiSEXP);
    rcpp_result_gen = Rcpp::wrap(assign_pp_pLists(samples_s1, usePhi));
    return rcpp_result_gen;
END_RCPP
}
// summed_log_likelihood
double summed_log_likelihood(arma::vec& pVec, Rcpp::List& data);
RcppExport SEXP ggdmc_summed_log_likelihood(SEXP pVecSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(summed_log_likelihood(pVec, data));
    return rcpp_result_gen;
END_RCPP
}
// summed_log_likelihood_parallel
double summed_log_likelihood_parallel(arma::vec& pVec, Rcpp::List& data);
RcppExport SEXP ggdmc_summed_log_likelihood_parallel(SEXP pVecSEXP, SEXP dataSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type data(dataSEXP);
    rcpp_result_gen = Rcpp::wrap(summed_log_likelihood_parallel(pVec, data));
    return rcpp_result_gen;
END_RCPP
}
// summed_log_prior
double summed_log_prior(arma::vec& pVec, Rcpp::List& pPrior);
RcppExport SEXP ggdmc_summed_log_prior(SEXP pVecSEXP, SEXP pPriorSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< arma::vec& >::type pVec(pVecSEXP);
    Rcpp::traits::input_parameter< Rcpp::List& >::type pPrior(pPriorSEXP);
    rcpp_result_gen = Rcpp::wrap(summed_log_prior(pVec, pPrior));
    return rcpp_result_gen;
END_RCPP
}
